services:
  receiver:
    restart: always
    user: nobody
    image: swimminwebdev/receiver:latest
    deploy:
      replicas: 3
    build:
      context: receiver
      dockerfile: Dockerfile
    expose:
      - "8080"
    volumes:
      - ./config/receiver:/app/config
      - ./config/shared/log_conf.yml:/config/log_conf.yml
      - ./logs/receiver:/app/logs 
    depends_on:
      kafka:
        condition: service_healthy

  storage:
    restart: always
    user: nobody
    image: swimminwebdev/storage:latest
    build:
      context: storage
      dockerfile: Dockerfile
    volumes:
      - ./config/storage:/app/config
      - ./config/shared/log_conf.yml:/config/log_conf.yml   
      - ./logs/storage:/app/logs
      - ./data/database:/app/data/database 
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy  

  processing:
    restart: always
    user: nobody
    image: swimminwebdev/processing:latest
    build:
      context: processing
      dockerfile: Dockerfile
    environment:
      CORS_ALLOW_ALL: no
    expose:
      - "8100"
    volumes:
      - ./config/processing:/app/config
      - ./config/shared/log_conf.yml:/config/log_conf.yml
      - ./logs/processing:/app/logs
      - ./data/processing:/app/data
    depends_on:
      - storage
             
  analyzer:
    restart: always
    user: nobody
    image: swimminwebdev/analyzer:latest
    build:
      context: analyzer
      dockerfile: Dockerfile
    environment:    
      CORS_ALLOW_ALL: no
    expose:
      - "8110"
    volumes:
      - ./config/analyzer:/app/config  
      - ./config/shared/log_conf.yml:/config/log_conf.yml
      - ./logs/analyzer:/app/logs      
    depends_on:
      kafka:
       condition: service_healthy
  
  dashboard:
    restart: always
    build:
      context: dashboard
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./dashboard/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - processing
      - analyzer

  consistency_check:
    restart: always
    user: nobody
    build:
      context: consistency_check
      dockerfile: Dockerfile
    expose:
      - "8120"
    volumes:
      - ./config/consistency_check:/app/config
      - ./config/shared/log_conf.yml:/config/log_conf.yml
      - ./logs/consistency_check:/app/logs
      - ./data/consistency_check:/app/data
    environment:
      CORS_ALLOW_ALL: no
    depends_on:
      - storage
      - analyzer
      - processing
      - kafka  

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    restart: always
    # volumes:
    #   - zookeeper-data:/data
    #   - zookeeper-log:/datalog
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5


  kafka:
    container_name: kafka
    image: wurstmeister/kafka
    restart: always
    command: [start-kafka.sh]
    expose:
      - "9092"
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1" # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: kafka # docker-machine ip
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_DIRS: /kafka/kafka-logs
    volumes:
      - ./data/kafka:/kafka
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:29092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    container_name: mysql
    image: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
    expose:
      - "3306"
    volumes:
      - ./data/database:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  zookeeper-data:
  zookeeper-log: